#+TITLE: Emacs Configuration
#+AUTHOR: Claes Hallstrom
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

Ensure that =use-package= installs the package if it is not already installed, also always compile and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (require 'diminish)
  (require 'bind-key)
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :defer t
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
* Emacs customization's

Save Emacs customization settings in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC

Save Emacs backup files elsewhere.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name ".backup" user-emacs-directory))))

  (setq delete-old-versions t
        kept-new-versions 6
        kept-old-versions 2
        version-control t)

  (setq auto-save-file-name-transforms
        `((".*" ,(expand-file-name ".backup" user-emacs-directory))))
#+END_SRC
* Appearance

Configure the appearance of Emacs.

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  :config
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (set-window-scroll-bars (minibuffer-window) nil nil))
#+END_SRC

Highlight current line and visually indicate matching pairs of parentheses.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)

  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
#+END_SRC

Configure to show line and column numbers.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Theme

Install and load ==material-theme==

#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :config (load-theme 'material t))
#+END_SRC
** Mode line

Configure mode line without icon and showing minor modes and buffer name.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :config
    (setq doom-modeline-buffer-encoding nil)
    (setq doom-modeline-icon nil)
    (setq doom-modeline-minor-modes t)
    (setq doom-modeline-buffer-file-name-style 'buffer-name))
#+END_SRC
* Org-mode

Configure org source code blocks.

#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t))
#+END_SRC

* Configure =which-key=

Show some extra help using =which-key=.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC
* Configure =ivy= and =counsel=

Install ivy and counsel and some basic configuration.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "")
    (setq ivy-display-style 'fancy)
    (setq ivy-extra-directories ())
    (setq ivy-sort-matches-functions-alist
          '((t . ivy--prefix-sort)))
    (define-key ivy-minibuffer-map (kbd "TAB") 'ivy-partial))

  (use-package ivy-rich
    :ensure t
    :config
    (setcdr (assq t ivy-format-functions-alist)
            #'ivy-format-function-line)
    (ivy-rich-mode 1))

  (use-package ivy-posframe
    :diminish ivy-posframe-mode
    :custom
    (ivy-posframe-height-alist
     '((t . 10)))
    (ivy-posframe-display-functions-alist
     '((counsel-find-file . nil)
       (t . ivy-posframe-display-at-frame-center)))
    :config
    (ivy-posframe-mode 1))

  (use-package counsel
    :diminish counsel-mode
    :config
    (counsel-mode 1)
    (setq counsel-find-file-ignore-regexp
            (concat
             ;; file names beginning with #
             "\\(?:\\`[#]\\)"
             ;; file names ending with # or ~
             "\\|\\(?:[#~]\\'\\)")))
#+END_SRC
* Miscellaneous

Use eww to browse urls.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

Tabs are evil.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Writing 'yes/no' takes to much time...

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use 4 as default tab width, 8 is to much.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Allow to change case of region.

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

Allow narrowing.

#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

Delete all the white space when hitting backspace or delete.

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC

Kill compilation process before starting another.

#+BEGIN_SRC emacs-lisp
  (setq-default compilation-always-kill t)
#+END_SRC

Save all buffers before compile.

#+BEGIN_SRC emacs-lisp
  (setq-default compilation-ask-about-save nil)
#+END_SRC

Scroll compilation buffer to first error, will scroll to bottom if no error.

#+BEGIN_SRC emacs-lisp
  (setq-default compilation-scroll-output 'first-error)
#+END_SRC

Colorize compilation buffer.

#+BEGIN_SRC emacs-lisp
  (use-package ansi-color
    :config (add-hook 'compilation-filter-hook 'colorize-compilation-buffer))

  (defun colorize-compilation-buffer ()
    (ansi-color-apply-on-region compilation-filter-start (point)))
#+END_SRC
* Completion

Configure dabbrev.

#+BEGIN_SRC emacs-lisp
  (use-package dabbrev
    :custom
    (dabbrev-abbrev-char-regexp nil)
    (dabbrev-backward-only nil)
    (dabbrev-case-distinction nil)
    (dabbrev-case-fold-search t)
    (dabbrev-case-replace nil)
    (dabbrev-eliminate-newlines nil)
    (dabbrev-upcase-means-case-search t))
#+END_SRC
* Keybindings

Execute the very useful dynamic abbreviation expand.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'dabbrev-expand)
#+END_SRC
* Window Movement
Use ace-window when switching between windows.

#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :bind ("C-x o" . ace-window))
#+END_SRC
* Dired

Set the flags passed to ls by dired.

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhva")
#+END_SRC

Hide details by default, toggle with =(= when in dired.

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+END_SRC
* Buffer

Use ibuffer instead.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Do not ask for confirmation to delete marked buffers.

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

Keep the buffer list up to date.

#+BEGIN_SRC emacs-lisp
  (add-hook 'buffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)))
#+END_SRC

Assume that I always want to kill the current buffer.

#+BEGIN_SRC emacs-lisp
  (defun claha/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'claha/kill-current-buffer)
#+END_SRC
* Spell checking

Use spell checking when writing normal text.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :diminish flyspell-mode
    :config
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-mode-hook 'flyspell-mode))
#+END_SRC
* Searching

Use avy to search by first letter of a word.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :defer t
  :init
  (avy-setup-default))
#+END_SRC

Install ag (the silver searcher).

#+BEGIN_SRC emacs-lisp
  (use-package ag
    :defer t)
#+END_SRC
* Version control

Use magit and git-commit. Also add diff-hl to highlight changes.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c g" . magit-status)))

  (use-package git-commit
    :defer t)
  (setq git-commit-summary-max-length 50)
  (add-hook 'git-commit-mode-hook 'claha/git-commit-auto-fill-everywhere)

  (defun claha/git-commit-auto-fill-everywhere ()
    "Ensures that the commit body does not exceed 72 characters."
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nil))

  (use-package diff-hl
    :config
    (setq diff-hl-side 'right)
    (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
    (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
#+END_SRC
* Flycheck

Enable flycheck globally.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :defer t
    :init
    (global-flycheck-mode t))
#+END_SRC
* CMake

Install CMake mode.

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode
    :defer t)
#+END_SRC
* Hydra

Install Hydra.

#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :defer t)
#+END_SRC
* C/C++

Configure c/c++ indentation.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "linux" c-basic-offset 2)
  (c-set-offset 'case-label '+)
#+END_SRC
* Yasnippet

Enable yasnippet, will only use snippets defined locally in snippets directory.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :config (yas-global-mode 1))
#+END_SRC
* Dumb Jump

Dumb Jump is an Emacs "jump to definition" package with support for
40+ programming languages that favors "just working". This means
minimal -- and ideally zero -- configuration with absolutely no stored
indexes (TAGS) or persistent background processes. Dumb Jump requires
at least GNU Emacs 24.3.

#+BEGIN_SRC emacs-lisp
  (use-package dumb-jump
    :config
    (setq dumb-jump-selector 'ivy)
    (setq dumb-jump-force-searcher 'ag)
    (add-hook 'xref-backend-functions #'dumb-jump-xref-activate))
#+END_SRC
* Private

Load private file if it exists and is readable.

#+BEGIN_SRC emacs-lisp
  (if (file-readable-p (expand-file-name "private.el" user-emacs-directory))
      (load-file (expand-file-name "private.el" user-emacs-directory)))
#+END_SRC
