#+TITLE: Emacs Configuration
#+AUTHOR: Claes Hallstrom
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

Ensure that =use-package= installs the package if it is not already installed, also always compile and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC
* Emacs customization's

Save Emacs customization settings in a separate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* Appearance

Configure the appearance of Emacs.

Do not show the startup message and clear the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+END_SRC

Remove bars that we do not use and takes up space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

Highlight current line and visually indicate matching pairs of parentheses.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)

  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
#+END_SRC

Configure to show line and column numbers.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Theme

Install and load ==material-theme==

#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :config (load-theme 'material t))
#+END_SRC
** Mode line

Configure mode line without icon and showing minor modes and buffer name.

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
  (setq doom-modeline-icon nil)
  (setq doom-modeline-minor-modes t)
  (setq doom-modeline-buffer-file-name-style 'buffer-name)
#+END_SRC
* Configure Org

Install latest version of Org.

#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

Make it prettier using bullets and downward-pointing arrow.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))

  (setq org-ellipsis "â¤µ")
#+END_SRC

Configure source window to behave naively and to open in separate window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tabs-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

Configure languages that babel should evaluate and do not ask before evaluating.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages

   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Export to HTML

Install needed package to be able to export to HTML.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

Use Firefox to view generated file.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+END_SRC

Do not include footer.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC
* Configure =which-key=

Show some extra help using =which-key=.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Configure =ivy=

Install ivy and some basic configuration.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))
#+END_SRC
* Miscellaneous

Tabs are evil.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Writing 'yes/no' takes to much time...

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use 4 as default tab width, 8 is to much.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Allow to change case of region.

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC

Delete all the white space when hitting backspace or delete.

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC

Scroll compilation buffer to first error, will scroll to bottom if no error.

#+BEGIN_SRC emacs-lisp
  (setq compilation-scroll-output 'first-error)
#+END_SRC
* Keybindings

Execute the very useful dynamic abbreviation expand.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'dabbrev-expand)
#+END_SRC

Quickly change to the other window.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
* Dired

Set the flags passed to ls by dired.

#+BEGIN_SRC emacs-lisp
  (setq-default dired-listing-switches "-lhva")
#+END_SRC

Hide details by default, toggle with =(= when in dired.

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook (lambda () (dired-hide-details-mode 1)))
#+END_SRC
* Buffer

Use ibuffer instead.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

Do not ask for confirmation to delete marked buffers.

#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC

Keep the buffer list up to date.

#+BEGIN_SRC emacs-lisp
  (add-hook 'buffer-mode-hook
            '(lambda ()
               (ibuffer-auto-mode 1)))
#+END_SRC

Assume that I always want to kill the current buffer.

#+BEGIN_SRC emacs-lisp
  (defun claha/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'claha/kill-current-buffer)
#+END_SRC
* Spell checking

Use spell checking when writing normal text.

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :config
    (add-hook 'text-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook 'flyspell-mode)
    (add-hook 'git-commit-mode-hook 'flyspell-mode))
#+END_SRC
* Searching

Use avy to search by first letter of a word.

#+BEGIN_SRC emacs-lisp
  (use-package avy
    :bind ("M-s" . avy-goto-word-1))
#+END_SRC
* Version control

Use git-commit.

#+BEGIN_SRC emacs-lisp
  (use-package git-commit)
  (setq git-commit-summary-max-length 50)
  (add-hook 'git-commit-mode-hook 'claha/git-commit-auto-fill-everywhere)

  (defun claha/git-commit-auto-fill-everywhere ()
    "Ensures that the commit body does not exceed 72 characters."
    (setq fill-column 72)
    (setq-local comment-auto-fill-only-comments nil))
#+END_SRC
* Flycheck

Enable flycheck globally.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (global-flycheck-mode t))
#+END_SRC
* CMake

Install CMake mode.

#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC
* Hydra

Install Hydra.

#+BEGIN_SRC emacs-lisp
  (use-package hydra)
#+END_SRC
* Go

Install and configure golang.

#+BEGIN_SRC emacs-lisp
  (use-package go-mode
    :init
    (add-hook 'before-save-hook 'gofmt-before-save))
#+END_SRC
