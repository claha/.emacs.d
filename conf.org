#+TITLE: Emacs Configuration
#+AUTHOR: Claes Hallstrom
#+OPTIONS: toc:nil num:nil

* Configure =use-package=

Ensure that =use-package= installs the package if it is not already installed, also always compile and use the newest version available.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)

  (use-package auto-compile
    :config (auto-compile-on-load-mode))

  (setq load-prefer-newer t)
#+END_SRC

* Emacs customizations

Save emacs customization settings in a seperate file.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* Apperance

Configure the apperance of emacs.

Do not show the startup message and clear the scratch buffer.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
#+END_SRC

Remove bars that we do not use and takes up space.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
  (menu-bar-mode 0)
  (scroll-bar-mode -1)
  (set-window-scroll-bars (minibuffer-window) nil nil)
#+END_SRC

Highlight current line and visually indicate matching pairs of parentheses.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)

  (show-paren-mode 1)
  (setq show-paren-delay 0.0)
#+END_SRC

Configure to show line and column numbers.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (setq line-number-mode t)
  (setq column-number-mode t)
#+END_SRC

** Theme

Install and load ==material-theme==

#+BEGIN_SRC emacs-lisp
  (use-package material-theme
    :config (load-theme 'material t))
#+END_SRC
* Configure Org

Install latest version of Org.

#+BEGIN_SRC emacs-lisp
  (use-package org)
#+END_SRC

Make it prettier using bullets and downward-pointing arrow.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :init
    (add-hook 'org-mode-hook 'org-bullets-mode))

  (setq org-ellipsis "â¤µ")
#+END_SRC

Configure source window to behave natively and to open in seperate window.

#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tabs-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

Configure languages that babel should evaluate and do not ask before evaluating.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages

   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)
#+END_SRC

** Export to HTML

Install needed package to be able to export to HTML.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

Use firefox to view generated file.

#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'browse-url-generic
	browse-url-generic-program "firefox")
#+END_SRC

Do not include footer.

#+BEGIN_SRC emacs-lisp
  (setq org-html-postamble nil)
#+END_SRC
* Configure =which-key=

Show some extra help using =which-key=.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Miscellaneous

Tabs are evil.

#+BEGIN_SRC emacs-lisp
  (setq-default indent-tabs-mode nil)
#+END_SRC

Writing 'yes/no' takes to much time...

#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Use 4 as default tab width, 8 is to much.

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

Allow to change case of region.

#+BEGIN_SRC emacs-lisp
  (put 'downcase-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
#+END_SRC
* Keybindings

Execute the very useful dynamic abbreviation expand.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-.") 'dabbrev-expand)
#+END_SRC

Quickly change to the other window.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'other-window)
#+END_SRC
